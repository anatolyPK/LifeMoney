"""add stock transaction models

Revision ID: 1e36de0f46d0
Revises: 9107fcb60007
Create Date: 2024-09-29 19:53:37.209844

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "1e36de0f46d0"
down_revision: Union[str, None] = "9107fcb60007"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "bond",
        sa.Column("nominal", sa.Float(), nullable=False),
        sa.Column("initial_nominal", sa.Float(), nullable=False),
        sa.Column("aci_value", sa.Float(), nullable=False),
        sa.Column("country_of_risk", sa.String(), nullable=False),
        sa.Column("sector", sa.String(), nullable=False),
        sa.Column("floating_coupon_flag", sa.Boolean(), nullable=False),
        sa.Column("perpetual_flag", sa.Boolean(), nullable=False),
        sa.Column("amortization_flag", sa.Boolean(), nullable=False),
        sa.Column("figi", sa.String(), nullable=False),
        sa.Column("symbol", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("currency", sa.String(), nullable=False),
        sa.Column("buy_available_flag", sa.Boolean(), nullable=False),
        sa.Column("sell_available_flag", sa.Boolean(), nullable=False),
        sa.Column("for_iis_flag", sa.Boolean(), nullable=False),
        sa.Column("for_qual_investor_flag", sa.Boolean(), nullable=False),
        sa.Column("exchange", sa.String(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "currency",
        sa.Column("lot", sa.Integer(), nullable=False),
        sa.Column("nominal", sa.Float(), nullable=False),
        sa.Column("country_of_risk", sa.String(), nullable=False),
        sa.Column("min_price_increment", sa.Float(), nullable=False),
        sa.Column("figi", sa.String(), nullable=False),
        sa.Column("symbol", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("currency", sa.String(), nullable=False),
        sa.Column("buy_available_flag", sa.Boolean(), nullable=False),
        sa.Column("sell_available_flag", sa.Boolean(), nullable=False),
        sa.Column("for_iis_flag", sa.Boolean(), nullable=False),
        sa.Column("for_qual_investor_flag", sa.Boolean(), nullable=False),
        sa.Column("exchange", sa.String(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "etf",
        sa.Column("fixed_commission", sa.Float(), nullable=False),
        sa.Column("focus_type", sa.String(), nullable=False),
        sa.Column("country_of_risk", sa.String(), nullable=False),
        sa.Column("sector", sa.String(), nullable=False),
        sa.Column("figi", sa.String(), nullable=False),
        sa.Column("symbol", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("currency", sa.String(), nullable=False),
        sa.Column("buy_available_flag", sa.Boolean(), nullable=False),
        sa.Column("sell_available_flag", sa.Boolean(), nullable=False),
        sa.Column("for_iis_flag", sa.Boolean(), nullable=False),
        sa.Column("for_qual_investor_flag", sa.Boolean(), nullable=False),
        sa.Column("exchange", sa.String(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "future",
        sa.Column("lot", sa.Integer(), nullable=False),
        sa.Column("short_enabled_flag", sa.Boolean(), nullable=False),
        sa.Column("last_trade_day", sa.DateTime(), nullable=False),
        sa.Column("futures_type", sa.String(), nullable=False),
        sa.Column("asset_type", sa.String(), nullable=False),
        sa.Column("country_of_risk", sa.String(), nullable=False),
        sa.Column("sector", sa.String(), nullable=False),
        sa.Column("expiration_date", sa.DateTime(), nullable=False),
        sa.Column("min_price_increment_amount", sa.Float(), nullable=False),
        sa.Column("figi", sa.String(), nullable=False),
        sa.Column("symbol", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("currency", sa.String(), nullable=False),
        sa.Column("buy_available_flag", sa.Boolean(), nullable=False),
        sa.Column("sell_available_flag", sa.Boolean(), nullable=False),
        sa.Column("for_iis_flag", sa.Boolean(), nullable=False),
        sa.Column("for_qual_investor_flag", sa.Boolean(), nullable=False),
        sa.Column("exchange", sa.String(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "share",
        sa.Column("lot", sa.Integer(), nullable=False),
        sa.Column("nominal", sa.Float(), nullable=False),
        sa.Column("country_of_risk", sa.String(), nullable=False),
        sa.Column("sector", sa.String(), nullable=False),
        sa.Column("div_yield_flag", sa.Boolean(), nullable=False),
        sa.Column("figi", sa.String(), nullable=False),
        sa.Column("symbol", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("currency", sa.String(), nullable=False),
        sa.Column("buy_available_flag", sa.Boolean(), nullable=False),
        sa.Column("sell_available_flag", sa.Boolean(), nullable=False),
        sa.Column("for_iis_flag", sa.Boolean(), nullable=False),
        sa.Column("for_qual_investor_flag", sa.Boolean(), nullable=False),
        sa.Column("exchange", sa.String(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "bond_transaction",
        sa.Column("bond_id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.Column("quantity", sa.Float(), nullable=False),
        sa.Column(
            "operation", sa.Enum("BUY", "SELL", name="operationenum"), nullable=False
        ),
        sa.Column("price", sa.Float(), nullable=False),
        sa.Column("timestamp", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(["bond_id"], ["bond.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "currency_transaction",
        sa.Column("currency_id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.Column("quantity", sa.Float(), nullable=False),
        sa.Column(
            "operation", sa.Enum("BUY", "SELL", name="operationenum"), nullable=False
        ),
        sa.Column("price", sa.Float(), nullable=False),
        sa.Column("timestamp", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(["currency_id"], ["currency.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "etf_transaction",
        sa.Column("etf_id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.Column("quantity", sa.Float(), nullable=False),
        sa.Column(
            "operation", sa.Enum("BUY", "SELL", name="operationenum"), nullable=False
        ),
        sa.Column("price", sa.Float(), nullable=False),
        sa.Column("timestamp", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(["etf_id"], ["etf.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "future_transaction",
        sa.Column("future_id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.Column("quantity", sa.Float(), nullable=False),
        sa.Column(
            "operation", sa.Enum("BUY", "SELL", name="operationenum"), nullable=False
        ),
        sa.Column("price", sa.Float(), nullable=False),
        sa.Column("timestamp", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(["future_id"], ["future.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "share_transaction",
        sa.Column("share_id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.Column("quantity", sa.Float(), nullable=False),
        sa.Column(
            "operation", sa.Enum("BUY", "SELL", name="operationenum"), nullable=False
        ),
        sa.Column("price", sa.Float(), nullable=False),
        sa.Column("timestamp", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(["share_id"], ["share.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("share_transaction")
    op.drop_table("future_transaction")
    op.drop_table("etf_transaction")
    op.drop_table("currency_transaction")
    op.drop_table("bond_transaction")
    op.drop_table("share")
    op.drop_table("future")
    op.drop_table("etf")
    op.drop_table("currency")
    op.drop_table("bond")
    # ### end Alembic commands ###
